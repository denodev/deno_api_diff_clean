diff --git a/lib.deno.ns.d.ts b/lib.deno.ns.d.ts
index d93f3c0..e4a1d6e 100644
--- a/lib.deno.ns.d.ts
+++ b/lib.deno.ns.d.ts
@@ -1,87 +1,51 @@
 declare namespace Deno {
   export let pid: number;
   export let noColor: boolean;
-  export type TestFunction = () => void | Promise<void>;
   export interface TestDefinition {
-    fn: TestFunction;
+    fn: () => void | Promise<void>;
     name: string;
     ignore?: boolean;
     disableOpSanitizer?: boolean;
     disableResourceSanitizer?: boolean;
   }
   export function test(t: TestDefinition): void;
-  export function test(fn: TestFunction): void;
-  export function test(name: string, fn: TestFunction): void;
-  enum TestStatus {
-    Passed = "passed",
-    Failed = "failed",
-    Ignored = "ignored",
-  }
-  interface TestResult {
-    name: string;
-    status: TestStatus;
-    duration?: number;
-    error?: Error;
-  }
-  interface TestStats {
-    filtered: number;
-    ignored: number;
-    measured: number;
-    passed: number;
-    failed: number;
-  }
-  export enum TestEvent {
-    Start = "start",
-    TestStart = "testStart",
-    TestEnd = "testEnd",
-    End = "end",
-  }
-  interface TestEventStart {
-    kind: TestEvent.Start;
-    tests: number;
-  }
-  interface TestEventTestStart {
-    kind: TestEvent.TestStart;
-    name: string;
-  }
-  interface TestEventTestEnd {
-    kind: TestEvent.TestEnd;
-    result: TestResult;
-  }
-  interface TestEventEnd {
-    kind: TestEvent.End;
-    stats: TestStats;
-    duration: number;
-    results: TestResult[];
-  }
-  interface TestReporter {
-    start(event: TestEventStart): Promise<void>;
-    testStart(msg: TestEventTestStart): Promise<void>;
-    testEnd(msg: TestEventTestEnd): Promise<void>;
-    end(event: TestEventEnd): Promise<void>;
-  }
-  export class ConsoleTestReporter implements TestReporter {
-    constructor();
-    start(event: TestEventStart): Promise<void>;
-    testStart(msg: TestEventTestStart): Promise<void>;
-    testEnd(msg: TestEventTestEnd): Promise<void>;
-    end(event: TestEventEnd): Promise<void>;
+  export function test(fn: () => void | Promise<void>): void;
+  export function test(name: string, fn: () => void | Promise<void>): void;
+  export interface TestMessage {
+    start?: {
+      tests: TestDefinition[];
+    };
+    testStart?: {
+      [P in keyof TestDefinition]: TestDefinition[P];
+    };
+    testEnd?: {
+      name: string;
+      status: "passed" | "failed" | "ignored";
+      duration: number;
+      error?: Error;
+    };
+    end?: {
+      filtered: number;
+      ignored: number;
+      measured: number;
+      passed: number;
+      failed: number;
+      duration: number;
+      results: Array<TestMessage["testEnd"] & {}>;
+    };
   }
   export interface RunTestsOptions {
     exitOnFail?: boolean;
     failFast?: boolean;
-    only?: string | RegExp;
+    filter?: string | RegExp;
     skip?: string | RegExp;
     disableLog?: boolean;
-    reporter?: TestReporter;
+    reportToConsole?: boolean;
+    onMessage?: (message: TestMessage) => void | Promise<void>;
   }
   export function runTests(
     opts?: RunTestsOptions,
-  ): Promise<{
-    results: TestResult[];
-    stats: TestStats;
-    duration: number;
-  }>;
+  ): Promise<TestMessage["end"]> & {};
   export function loadavg(): number[];
   export function hostname(): string;
   export function osRelease(): string;
@@ -154,10 +118,10 @@ declare namespace Deno {
   export function open(path: string, openMode?: OpenMode): Promise<File>;
   export function createSync(path: string): File;
   export function create(path: string): Promise<File>;
-  export function readSync(rid: number, p: Uint8Array): number | EOF;
-  export function read(rid: number, p: Uint8Array): Promise<number | EOF>;
-  export function writeSync(rid: number, p: Uint8Array): number;
-  export function write(rid: number, p: Uint8Array): Promise<number>;
+  export function readSync(rid: number, buffer: Uint8Array): number | EOF;
+  export function read(rid: number, buffer: Uint8Array): Promise<number | EOF>;
+  export function writeSync(rid: number, data: Uint8Array): number;
+  export function write(rid: number, data: Uint8Array): Promise<number>;
   export function seekSync(
     rid: number,
     offset: number,
