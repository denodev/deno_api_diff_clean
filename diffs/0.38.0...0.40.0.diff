diff --git a/lib.deno.ns.d.ts b/lib.deno.ns.d.ts
index d93f3c0..e4a1d6e 100644
--- a/lib.deno.ns.d.ts
+++ b/lib.deno.ns.d.ts
@@ -1,87 +1,51 @@
 declare namespace Deno {
   export let pid: number;
   export let noColor: boolean;
-  export type TestFunction = () => void | Promise<void>;
   export interface TestDefinition {
-    fn: TestFunction;
+    fn: () => void | Promise<void>;
     name: string;
     ignore?: boolean;
     disableOpSanitizer?: boolean;
     disableResourceSanitizer?: boolean;
   }
   export function test(t: TestDefinition): void;
-  export function test(fn: TestFunction): void;
-  export function test(name: string, fn: TestFunction): void;
-  enum TestStatus {
-    Passed = "passed",
-    Failed = "failed",
-    Ignored = "ignored",
-  }
-  interface TestResult {
-    name: string;
-    status: TestStatus;
-    duration?: number;
-    error?: Error;
-  }
-  interface TestStats {
-    filtered: number;
-    ignored: number;
-    measured: number;
-    passed: number;
-    failed: number;
-  }
-  export enum TestEvent {
-    Start = "start",
-    TestStart = "testStart",
-    TestEnd = "testEnd",
-    End = "end",
-  }
-  interface TestEventStart {
-    kind: TestEvent.Start;
-    tests: number;
-  }
-  interface TestEventTestStart {
-    kind: TestEvent.TestStart;
-    name: string;
-  }
-  interface TestEventTestEnd {
-    kind: TestEvent.TestEnd;
-    result: TestResult;
-  }
-  interface TestEventEnd {
-    kind: TestEvent.End;
-    stats: TestStats;
-    duration: number;
-    results: TestResult[];
-  }
-  interface TestReporter {
-    start(event: TestEventStart): Promise<void>;
-    testStart(msg: TestEventTestStart): Promise<void>;
-    testEnd(msg: TestEventTestEnd): Promise<void>;
-    end(event: TestEventEnd): Promise<void>;
-  }
-  export class ConsoleTestReporter implements TestReporter {
-    constructor();
-    start(event: TestEventStart): Promise<void>;
-    testStart(msg: TestEventTestStart): Promise<void>;
-    testEnd(msg: TestEventTestEnd): Promise<void>;
-    end(event: TestEventEnd): Promise<void>;
+  export function test(fn: () => void | Promise<void>): void;
+  export function test(name: string, fn: () => void | Promise<void>): void;
+  export interface TestMessage {
+    start?: {
+      tests: TestDefinition[];
+    };
+    testStart?: {
+      [P in keyof TestDefinition]: TestDefinition[P];
+    };
+    testEnd?: {
+      name: string;
+      status: "passed" | "failed" | "ignored";
+      duration: number;
+      error?: Error;
+    };
+    end?: {
+      filtered: number;
+      ignored: number;
+      measured: number;
+      passed: number;
+      failed: number;
+      duration: number;
+      results: Array<TestMessage["testEnd"] & {}>;
+    };
   }
   export interface RunTestsOptions {
     exitOnFail?: boolean;
     failFast?: boolean;
-    only?: string | RegExp;
+    filter?: string | RegExp;
     skip?: string | RegExp;
     disableLog?: boolean;
-    reporter?: TestReporter;
+    reportToConsole?: boolean;
+    onMessage?: (message: TestMessage) => void | Promise<void>;
   }
   export function runTests(
     opts?: RunTestsOptions,
-  ): Promise<{
-    results: TestResult[];
-    stats: TestStats;
-    duration: number;
-  }>;
+  ): Promise<TestMessage["end"]> & {};
   export function loadavg(): number[];
   export function hostname(): string;
   export function osRelease(): string;
@@ -154,10 +118,10 @@ declare namespace Deno {
   export function open(path: string, openMode?: OpenMode): Promise<File>;
   export function createSync(path: string): File;
   export function create(path: string): Promise<File>;
-  export function readSync(rid: number, p: Uint8Array): number | EOF;
-  export function read(rid: number, p: Uint8Array): Promise<number | EOF>;
-  export function writeSync(rid: number, p: Uint8Array): number;
-  export function write(rid: number, p: Uint8Array): Promise<number>;
+  export function readSync(rid: number, buffer: Uint8Array): number | EOF;
+  export function read(rid: number, buffer: Uint8Array): Promise<number | EOF>;
+  export function writeSync(rid: number, data: Uint8Array): number;
+  export function write(rid: number, data: Uint8Array): Promise<number>;
   export function seekSync(
     rid: number,
     offset: number,
diff --git a/lib.deno.shared_globals.d.ts b/lib.deno.shared_globals.d.ts
index 9c0b9b4..d62f503 100644
--- a/lib.deno.shared_globals.d.ts
+++ b/lib.deno.shared_globals.d.ts
@@ -1,52 +1,27 @@
 declare interface WindowOrWorkerGlobalScope {
-  atob: typeof __textEncoding.atob;
-  btoa: typeof __textEncoding.btoa;
-  clearInterval: typeof __timers.clearInterval;
-  clearTimeout: typeof __timers.clearTimeout;
   fetch: typeof __fetch.fetch;
-  setInterval: typeof __timers.setInterval;
-  queueMicrotask: typeof __timers.queueMicrotask;
-  setTimeout: typeof __timers.setTimeout;
-  console: __console.Console;
-  Blob: typeof __blob.DenoBlob;
   File: __domTypes.DomFileConstructor;
   CustomEvent: typeof __customEvent.CustomEvent;
   Event: typeof __event.Event;
   EventTarget: typeof __eventTarget.EventTarget;
-  URL: typeof __url.URL;
-  URLSearchParams: typeof __urlSearchParams.URLSearchParams;
   Headers: __domTypes.HeadersConstructor;
   FormData: __domTypes.FormDataConstructor;
-  TextEncoder: typeof __textEncoding.TextEncoder;
-  TextDecoder: typeof __textEncoding.TextDecoder;
+  ReadableStream: __domTypes.ReadableStreamConstructor;
   Request: __domTypes.RequestConstructor;
   Response: typeof __fetch.Response;
-  performance: __performanceUtil.Performance;
-  Worker: typeof __workers.WorkerImpl;
   location: __domTypes.Location;
-  addEventListener: (
-    type: string,
-    callback: __domTypes.EventListenerOrEventListenerObject | null,
-    options?: boolean | __domTypes.AddEventListenerOptions | undefined,
-  ) => void;
-  dispatchEvent: (event: __domTypes.Event) => boolean;
-  removeEventListener: (
-    type: string,
-    callback: __domTypes.EventListenerOrEventListenerObject | null,
-    options?: boolean | __domTypes.EventListenerOptions | undefined,
-  ) => void;
 }
 declare namespace WebAssembly {
   interface WebAssemblyInstantiatedSource {
     module: Module;
     instance: Instance;
   }
-  function compile(bufferSource: __domTypes.BufferSource): Promise<Module>;
+  function compile(bufferSource: BufferSource): Promise<Module>;
   function compileStreaming(
     source: Promise<__domTypes.Response>,
   ): Promise<Module>;
   function instantiate(
-    bufferSource: __domTypes.BufferSource,
+    bufferSource: BufferSource,
     importObject?: object,
   ): Promise<WebAssemblyInstantiatedSource>;
   function instantiate(
@@ -57,7 +32,7 @@ declare namespace WebAssembly {
     source: Promise<__domTypes.Response>,
     importObject?: object,
   ): Promise<WebAssemblyInstantiatedSource>;
-  function validate(bufferSource: __domTypes.BufferSource): boolean;
+  function validate(bufferSource: BufferSource): boolean;
   type ImportExportKind = "function" | "table" | "memory" | "global";
   interface ModuleExportDescriptor {
     name: string;
@@ -69,7 +44,7 @@ declare namespace WebAssembly {
     kind: ImportExportKind;
   }
   class Module {
-    constructor(bufferSource: __domTypes.BufferSource);
+    constructor(bufferSource: BufferSource);
     static customSections(
       moduleObject: Module,
       sectionName: string,
@@ -123,16 +98,21 @@ declare namespace WebAssembly {
     constructor(message: string, fileName?: string, lineNumber?: string);
   }
 }
-declare const atob: typeof __textEncoding.atob;
-declare const btoa: typeof __textEncoding.btoa;
-declare const clearInterval: typeof __timers.clearInterval;
-declare const clearTimeout: typeof __timers.clearTimeout;
 declare const fetch: typeof __fetch.fetch;
-declare const setInterval: typeof __timers.setInterval;
-declare const setTimeout: typeof __timers.setTimeout;
-declare const queueMicrotask: typeof __timers.queueMicrotask;
-declare const console: __console.Console;
-declare const Blob: typeof __blob.DenoBlob;
+declare function setTimeout(
+  cb: (...args: unknown[]) => void,
+  delay?: number,
+  ...args: unknown[]
+): number;
+declare function setInterval(
+  cb: (...args: unknown[]) => void,
+  delay?: number,
+  ...args: unknown[]
+): number;
+declare function clearTimeout(id?: number): void;
+declare function clearInterval(id?: number): void;
+declare function queueMicrotask(func: Function): void;
+declare const console: Console;
 declare const File: __domTypes.DomFileConstructor;
 declare const CustomEventInit: typeof __customEvent.CustomEventInit;
 declare const CustomEvent: typeof __customEvent.CustomEvent;
@@ -140,29 +120,23 @@ declare const EventInit: typeof __event.EventInit;
 declare const Event: typeof __event.Event;
 declare const EventListener: __domTypes.EventListener;
 declare const EventTarget: typeof __eventTarget.EventTarget;
-declare const URL: typeof __url.URL;
-declare const URLSearchParams: typeof __urlSearchParams.URLSearchParams;
 declare const Headers: __domTypes.HeadersConstructor;
 declare const location: __domTypes.Location;
 declare const FormData: __domTypes.FormDataConstructor;
-declare const TextEncoder: typeof __textEncoding.TextEncoder;
-declare const TextDecoder: typeof __textEncoding.TextDecoder;
+declare const ReadableStream: __domTypes.ReadableStreamConstructor;
 declare const Request: __domTypes.RequestConstructor;
 declare const Response: typeof __fetch.Response;
-declare const performance: __performanceUtil.Performance;
-declare const Worker: typeof __workers.WorkerImpl;
-declare const addEventListener: (
+declare function addEventListener(
   type: string,
   callback: __domTypes.EventListenerOrEventListenerObject | null,
   options?: boolean | __domTypes.AddEventListenerOptions | undefined,
-) => void;
-declare const dispatchEvent: (event: __domTypes.Event) => boolean;
-declare const removeEventListener: (
+): void;
+declare function dispatchEvent(event: __domTypes.Event): boolean;
+declare function removeEventListener(
   type: string,
   callback: __domTypes.EventListenerOrEventListenerObject | null,
   options?: boolean | __domTypes.EventListenerOptions | undefined,
-) => void;
-declare type Blob = __domTypes.Blob;
+): void;
 declare type Body = __domTypes.Body;
 declare type File = __domTypes.DomFile;
 declare type CustomEventInit = __domTypes.CustomEventInit;
@@ -171,29 +145,20 @@ declare type EventInit = __domTypes.EventInit;
 declare type Event = __domTypes.Event;
 declare type EventListener = __domTypes.EventListener;
 declare type EventTarget = __domTypes.EventTarget;
-declare type URL = __url.URL;
-declare type URLSearchParams = __domTypes.URLSearchParams;
 declare type Headers = __domTypes.Headers;
 declare type FormData = __domTypes.FormData;
-declare type TextEncoder = __textEncoding.TextEncoder;
-declare type TextDecoder = __textEncoding.TextDecoder;
+declare type ReadableStream<R = any> = __domTypes.ReadableStream<R>;
 declare type Request = __domTypes.Request;
 declare type Response = __domTypes.Response;
-declare type Worker = __workers.Worker;
 declare interface ImportMeta {
   url: string;
   main: boolean;
 }
 declare namespace __domTypes {
-  export type BufferSource = ArrayBufferView | ArrayBuffer;
   export type HeadersInit =
     | Headers
     | Array<[string, string]>
     | Record<string, string>;
-  export type URLSearchParamsInit =
-    | string
-    | string[][]
-    | Record<string, string>;
   type BodyInit =
     | Blob
     | BufferSource
@@ -209,7 +174,6 @@ declare namespace __domTypes {
     | "origin-only"
     | "origin-when-cross-origin"
     | "unsafe-url";
-  export type BlobPart = BufferSource | Blob | string;
   export type FormDataEntryValue = DomFile | string;
   export interface DomIterable<K, V> {
     keys(): IterableIterator<K>;
@@ -221,11 +185,6 @@ declare namespace __domTypes {
       thisArg?: any,
     ): void;
   }
-  type EndingType = "transparent" | "native";
-  export interface BlobPropertyBag {
-    type?: string;
-    ending?: EndingType;
-  }
   interface AbortSignalEventMap {
     abort: ProgressEvent;
   }
@@ -269,20 +228,6 @@ declare namespace __domTypes {
     loaded?: number;
     total?: number;
   }
-  export interface URLSearchParams extends DomIterable<string, string> {
-    append(name: string, value: string): void;
-    delete(name: string): void;
-    get(name: string): string | null;
-    getAll(name: string): string[];
-    has(name: string): boolean;
-    set(name: string, value: string): void;
-    sort(): void;
-    toString(): string;
-    forEach(
-      callbackfn: (value: string, key: string, parent: this) => void,
-      thisArg?: any,
-    ): void;
-  }
   export interface EventInit {
     bubbles?: boolean;
     cancelable?: boolean;
@@ -412,6 +357,24 @@ declare namespace __domTypes {
     preventClose?: boolean;
     signal?: AbortSignal;
   }
+  export interface UnderlyingSource<R = any> {
+    cancel?: ReadableStreamErrorCallback;
+    pull?: ReadableStreamDefaultControllerCallback<R>;
+    start?: ReadableStreamDefaultControllerCallback<R>;
+    type?: undefined;
+  }
+  export interface ReadableStreamErrorCallback {
+    (reason: any): void | PromiseLike<void>;
+  }
+  export interface ReadableStreamDefaultControllerCallback<R> {
+    (controller: ReadableStreamDefaultController<R>): void | PromiseLike<void>;
+  }
+  export interface ReadableStreamDefaultController<R> {
+    readonly desiredSize: number;
+    enqueue(chunk?: R): void;
+    close(): void;
+    error(e?: any): void;
+  }
   export interface ReadableStream<R = any> {
     readonly locked: boolean;
     cancel(reason?: any): Promise<void>;
@@ -419,6 +382,10 @@ declare namespace __domTypes {
     getReader(): ReadableStreamDefaultReader<R>;
     tee(): [ReadableStream<R>, ReadableStream<R>];
   }
+  export interface ReadableStreamConstructor<R = any> {
+    new (src?: UnderlyingSource<R>): ReadableStream<R>;
+    prototype: ReadableStream<R>;
+  }
   export interface ReadableStreamReader<R = any> {
     cancel(reason: any): Promise<void>;
     read(): Promise<ReadableStreamReadResult<R>>;
@@ -458,11 +425,6 @@ declare namespace __domTypes {
     new (): FormData;
     prototype: FormData;
   }
-  export interface Blob {
-    readonly size: number;
-    readonly type: string;
-    slice(start?: number, end?: number, contentType?: string): Blob;
-  }
   export interface Body {
     readonly body: ReadableStream<Uint8Array> | null;
     readonly bodyUsed: boolean;
@@ -603,71 +565,64 @@ declare namespace __domTypes {
     replace(url: string): void;
   }
 }
-declare namespace __blob {
-  export class DenoBlob implements __domTypes.Blob {
-    readonly size: number;
-    readonly type: string;
-    constructor(
-      blobParts?: __domTypes.BlobPart[],
-      options?: __domTypes.BlobPropertyBag,
-    );
-    slice(start?: number, end?: number, contentType?: string): DenoBlob;
-  }
+type BufferSource = ArrayBufferView | ArrayBuffer;
+type BlobPart = BufferSource | Blob | string;
+interface BlobPropertyBag {
+  type?: string;
+  ending?: "transparent" | "native";
 }
-declare namespace __console {
-  type InspectOptions = Partial<{
-    showHidden: boolean;
-    depth: number;
-    colors: boolean;
-    indentLevel: number;
-  }>;
-  export class CSI {
-    static kClear: string;
-    static kClearScreenDown: string;
-  }
-  const isConsoleInstance: unique symbol;
-  export class Console {
-    indentLevel: number;
-    [isConsoleInstance]: boolean;
-    log: (...args: unknown[]) => void;
-    debug: (...args: unknown[]) => void;
-    info: (...args: unknown[]) => void;
-    dir: (
-      obj: unknown,
-      options?: Partial<{
-        showHidden: boolean;
-        depth: number;
-        colors: boolean;
-        indentLevel: number;
-      }>,
-    ) => void;
-    dirxml: (
-      obj: unknown,
-      options?: Partial<{
-        showHidden: boolean;
-        depth: number;
-        colors: boolean;
-        indentLevel: number;
-      }>,
-    ) => void;
-    warn: (...args: unknown[]) => void;
-    error: (...args: unknown[]) => void;
-    assert: (condition?: boolean, ...args: unknown[]) => void;
-    count: (label?: string) => void;
-    countReset: (label?: string) => void;
-    table: (data: unknown, properties?: string[] | undefined) => void;
-    time: (label?: string) => void;
-    timeLog: (label?: string, ...args: unknown[]) => void;
-    timeEnd: (label?: string) => void;
-    group: (...label: unknown[]) => void;
-    groupCollapsed: (...label: unknown[]) => void;
-    groupEnd: () => void;
-    clear: () => void;
-    trace: (...args: unknown[]) => void;
-    static [Symbol.hasInstance](instance: Console): boolean;
-  }
-  export const customInspect: unique symbol;
-  export function inspect(value: unknown, options?: InspectOptions): string;
+interface Blob {
+  readonly size: number;
+  readonly type: string;
+  arrayBuffer(): Promise<ArrayBuffer>;
+  slice(start?: number, end?: number, contentType?: string): Blob;
+  stream(): ReadableStream;
+  text(): Promise<string>;
+}
+declare const Blob: {
+  prototype: Blob;
+  new (blobParts?: BlobPart[], options?: BlobPropertyBag): Blob;
+};
+declare const isConsoleInstance: unique symbol;
+declare class Console {
+  indentLevel: number;
+  [isConsoleInstance]: boolean;
+  log: (...args: unknown[]) => void;
+  debug: (...args: unknown[]) => void;
+  info: (...args: unknown[]) => void;
+  dir: (
+    obj: unknown,
+    options?: Partial<{
+      showHidden: boolean;
+      depth: number;
+      colors: boolean;
+      indentLevel: number;
+    }>,
+  ) => void;
+  dirxml: (
+    obj: unknown,
+    options?: Partial<{
+      showHidden: boolean;
+      depth: number;
+      colors: boolean;
+      indentLevel: number;
+    }>,
+  ) => void;
+  warn: (...args: unknown[]) => void;
+  error: (...args: unknown[]) => void;
+  assert: (condition?: boolean, ...args: unknown[]) => void;
+  count: (label?: string) => void;
+  countReset: (label?: string) => void;
+  table: (data: unknown, properties?: string[] | undefined) => void;
+  time: (label?: string) => void;
+  timeLog: (label?: string, ...args: unknown[]) => void;
+  timeEnd: (label?: string) => void;
+  group: (...label: unknown[]) => void;
+  groupCollapsed: (...label: unknown[]) => void;
+  groupEnd: () => void;
+  clear: () => void;
+  trace: (...args: unknown[]) => void;
+  static [Symbol.hasInstance](instance: Console): boolean;
 }
 declare namespace __event {
   export const eventAttributes: WeakMap<object, any>;
@@ -789,48 +744,12 @@ declare namespace __eventTarget {
     readonly [Symbol.toStringTag]: string;
   }
 }
-declare namespace __io {
-  export enum SeekMode {
-    SEEK_START = 0,
-    SEEK_CURRENT = 1,
-    SEEK_END = 2,
-  }
-  export interface Reader {
-    read(p: Uint8Array): Promise<number | Deno.EOF>;
-  }
-  export interface SyncReader {
-    readSync(p: Uint8Array): number | Deno.EOF;
-  }
-  export interface Writer {
-    write(p: Uint8Array): Promise<number>;
-  }
-  export interface SyncWriter {
-    writeSync(p: Uint8Array): number;
-  }
-  export interface Closer {
-    close(): void;
-  }
-  export interface Seeker {
-    seek(offset: number, whence: SeekMode): Promise<number>;
-  }
-  export interface SyncSeeker {
-    seekSync(offset: number, whence: SeekMode): number;
-  }
-  export interface ReadCloser extends Reader, Closer {}
-  export interface WriteCloser extends Writer, Closer {}
-  export interface ReadSeeker extends Reader, Seeker {}
-  export interface WriteSeeker extends Writer, Seeker {}
-  export interface ReadWriteCloser extends Reader, Writer, Closer {}
-  export interface ReadWriteSeeker extends Reader, Writer, Seeker {}
-  export function copy(dst: Writer, src: Reader): Promise<number>;
-  export function toAsyncIterator(r: Reader): AsyncIterableIterator<Uint8Array>;
-}
 declare namespace __fetch {
   class Body
     implements
       __domTypes.Body,
       __domTypes.ReadableStream<Uint8Array>,
-      __io.ReadCloser
+      Deno.ReadCloser
   {
     readonly contentType: string;
     bodyUsed: boolean;
@@ -838,7 +757,7 @@ declare namespace __fetch {
     readonly body: __domTypes.ReadableStream<Uint8Array>;
     constructor(rid: number, contentType: string);
     arrayBuffer(): Promise<ArrayBuffer>;
-    blob(): Promise<__domTypes.Blob>;
+    blob(): Promise<Blob>;
     formData(): Promise<__domTypes.FormData>;
     json(): Promise<any>;
     text(): Promise<string>;
@@ -872,7 +791,7 @@ declare namespace __fetch {
       body_?: null | Body,
     );
     arrayBuffer(): Promise<ArrayBuffer>;
-    blob(): Promise<__domTypes.Blob>;
+    blob(): Promise<Blob>;
     formData(): Promise<__domTypes.FormData>;
     json(): Promise<any>;
     text(): Promise<string>;
@@ -881,126 +800,93 @@ declare namespace __fetch {
     redirect(url: URL | string, status: number): __domTypes.Response;
   }
   export function fetch(
-    input: __domTypes.Request | __url.URL | string,
+    input: __domTypes.Request | URL | string,
     init?: __domTypes.RequestInit,
   ): Promise<Response>;
 }
-declare namespace __textEncoding {
-  export function atob(s: string): string;
-  export function btoa(s: string): string;
-  export interface TextDecodeOptions {
-    stream?: false;
-  }
-  export interface TextDecoderOptions {
-    fatal?: boolean;
-    ignoreBOM?: boolean;
-  }
-  export class TextDecoder {
-    readonly encoding: string;
-    readonly fatal: boolean;
-    readonly ignoreBOM = false;
-    constructor(label?: string, options?: TextDecoderOptions);
-    decode(
-      input?: __domTypes.BufferSource,
-      options?: TextDecodeOptions,
-    ): string;
-    readonly [Symbol.toStringTag]: string;
-  }
-  interface TextEncoderEncodeIntoResult {
-    read: number;
-    written: number;
-  }
-  export class TextEncoder {
-    readonly encoding = "utf-8";
-    encode(input?: string): Uint8Array;
-    encodeInto(input: string, dest: Uint8Array): TextEncoderEncodeIntoResult;
-    readonly [Symbol.toStringTag]: string;
-  }
+declare function atob(s: string): string;
+declare function btoa(s: string): string;
+declare class TextDecoder {
+  readonly encoding: string;
+  readonly fatal: boolean;
+  readonly ignoreBOM = false;
+  constructor(
+    label?: string,
+    options?: { fatal?: boolean; ignoreBOM?: boolean },
+  );
+  decode(input?: BufferSource, options?: { stream?: false }): string;
+  readonly [Symbol.toStringTag]: string;
 }
-declare namespace __timers {
-  export type Args = unknown[];
-  export function setTimeout(
-    cb: (...args: Args) => void,
-    delay?: number,
-    ...args: Args
-  ): number;
-  export function setInterval(
-    cb: (...args: Args) => void,
-    delay?: number,
-    ...args: Args
-  ): number;
-  export function clearTimeout(id?: number): void;
-  export function clearInterval(id?: number): void;
-  export function queueMicrotask(func: Function): void;
+declare class TextEncoder {
+  readonly encoding = "utf-8";
+  encode(input?: string): Uint8Array;
+  encodeInto(
+    input: string,
+    dest: Uint8Array,
+  ): { read: number; written: number };
+  readonly [Symbol.toStringTag]: string;
 }
-declare namespace __urlSearchParams {
-  export class URLSearchParams {
-    constructor(init?: string | string[][] | Record<string, string>);
-    append(name: string, value: string): void;
-    delete(name: string): void;
-    getAll(name: string): string[];
-    get(name: string): string | null;
-    has(name: string): boolean;
-    set(name: string, value: string): void;
-    sort(): void;
-    forEach(
-      callbackfn: (value: string, key: string, parent: this) => void,
-      thisArg?: any,
-    ): void;
-    keys(): IterableIterator<string>;
-    values(): IterableIterator<string>;
-    entries(): IterableIterator<[string, string]>;
-    [Symbol.iterator](): IterableIterator<[string, string]>;
-    toString(): string;
-  }
+interface URLSearchParams {
+  append(name: string, value: string): void;
+  delete(name: string): void;
+  getAll(name: string): string[];
+  get(name: string): string | null;
+  has(name: string): boolean;
+  set(name: string, value: string): void;
+  sort(): void;
+  forEach(
+    callbackfn: (value: string, key: string, parent: this) => void,
+    thisArg?: any,
+  ): void;
+  keys(): IterableIterator<string>;
+  values(): IterableIterator<string>;
+  entries(): IterableIterator<[string, string]>;
+  [Symbol.iterator](): IterableIterator<[string, string]>;
+  toString(): string;
 }
-declare namespace __url {
-  export interface URL {
-    hash: string;
-    host: string;
-    hostname: string;
-    href: string;
-    readonly origin: string;
-    password: string;
-    pathname: string;
-    port: string;
-    protocol: string;
-    search: string;
-    readonly searchParams: __urlSearchParams.URLSearchParams;
-    username: string;
-    toString(): string;
-    toJSON(): string;
-  }
-  export const URL: {
-    prototype: URL;
-    new (url: string, base?: string | URL): URL;
-    createObjectURL(object: __domTypes.Blob): string;
-    revokeObjectURL(url: string): void;
-  };
+declare const URLSearchParams: {
+  prototype: URLSearchParams;
+  new (
+    init?: string[][] | Record<string, string> | string | URLSearchParams,
+  ): URLSearchParams;
+  toString(): string;
+};
+interface URL {
+  hash: string;
+  host: string;
+  hostname: string;
+  href: string;
+  toString(): string;
+  readonly origin: string;
+  password: string;
+  pathname: string;
+  port: string;
+  protocol: string;
+  search: string;
+  readonly searchParams: URLSearchParams;
+  username: string;
+  toJSON(): string;
 }
-declare namespace __workers {
-  export interface Worker {
-    onerror?: (e: Event) => void;
-    onmessage?: (e: { data: any }) => void;
-    onmessageerror?: () => void;
-    postMessage(data: any): void;
-    terminate(): void;
-  }
-  export interface WorkerOptions {
-    type?: "classic" | "module";
-    name?: string;
-  }
-  export class WorkerImpl implements Worker {
-    onerror?: (e: Event) => void;
-    onmessage?: (data: any) => void;
-    onmessageerror?: () => void;
-    constructor(specifier: string, options?: WorkerOptions);
-    postMessage(data: any): void;
-    terminate(): void;
-  }
+declare const URL: {
+  prototype: URL;
+  new (url: string, base?: string | URL): URL;
+  createObjectURL(object: any): string;
+  revokeObjectURL(url: string): void;
+};
+declare class Worker {
+  onerror?: (e: Event) => void;
+  onmessage?: (data: any) => void;
+  onmessageerror?: () => void;
+  constructor(
+    specifier: string,
+    options?: {
+      type?: "classic" | "module";
+      name?: string;
+    },
+  );
+  postMessage(data: any): void;
+  terminate(): void;
 }
-declare namespace __performanceUtil {
-  export class Performance {
-    now(): number;
-  }
+declare namespace performance {
+  export function now(): number;
 }
